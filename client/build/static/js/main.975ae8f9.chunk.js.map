{"version":3,"sources":["contexts/tileContext.js","components/TileComponent/TileDropDown.js","components/TileComponent/TileThumbnail.js","components/TileComponent/Tile.js","components/TileComponent/TileSection.js","components/TileComponent/TileShowMoreBtn.js","components/NavBarComponent/NavBar.js","components/TileComponent/TileComponent.js","components/TileComponent/TilePost.js","App.js","index.js"],"names":["TileContext","createContext","TileProvider","state","tileShowCount","loading","tiles","handleDropDown","id","setState","prevState","map","tile","i","isActive","handleDropDownKeyPress","e","key","fetchData","url","a","fetch","res","json","data","loadTiles","num","then","slice","catch","err","console","log","this","Provider","value","props","children","Component","TileDropDown","image","title","body","cta","index","className","src","alt","to","text","TileThumbnail","useContext","style","backgroundImage","tabIndex","onKeyPress","onClick","Tile","item","aria-label","aria-live","TileSection","TileLoadMore","useState","updatedTilesCount","setTilesCount","NavBar","length","TileComponent","TilePost","urlParam","match","params","post_id","post","setpost","setLoading","useEffect","filter","parseInt","standAlonePost","href","link","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.975ae8f9.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\n\nexport const TileContext = createContext();\n\nexport class TileProvider extends Component {\n    state = {\n        tileShowCount: 8,\n        loading: true,\n        tiles: [],\n        handleDropDown: (id) => {\n                \n        this.setState(prevState => ({\n                tiles: prevState.tiles.map((tile, i) => ({\n                    ...tile,\n                    isActive: ( id === i ) ? !this.state.tiles[id].isActive : false\n                }))\n            }));\n                   \n        },\n\n        handleDropDownKeyPress: (id, e) => {\n\n            if(e.key === 'Enter'){\n                \n                this.setState(prevState => ({\n                    tiles: prevState.tiles.map((tile, i) => ({\n                      ...tile,\n                      isActive: ( id === i ) ? !this.state.tiles[id].isActive : false\n                    }))\n                  }));\n\n            }\n\n        },\n\n        fetchData: async (url) => {\n            let res = await fetch(url)\n            let data = await res.json();\n\n            return data\n        },\n\n        loadTiles: (num) => {\n\n            this.state.fetchData('/data/tileInfo.json')\n                .then((res) => {\n                    this.setState( prevState => {\n                            return {\n                                tiles: res.slice(0, num), \n                                loading: false\n                            }\n                        });\n                    })\n                .catch((err) => {console.log(err);})\n          \n        }\n     }\n\n     componentDidMount() {\n        this.state.loadTiles(this.state.tileShowCount);\n     }\n\n\n      /**********************\n       NOTES:\n\n       tiles: prevState.tiles.map((tile, i) => ({\n            ...tile,\n            isActive: ( id === i ) ? !this.state.tiles[id].isActive : false\n          }))\n\n          The purpose of the above function is to map through each item in an array and create a new object literal for each.\n          This then updates the state in the component. \n\n          So, in this case, the fat arrow function is creating a new object literal.\n          In order to create an object literal, we have to wrap the \"{}\" in parentheses \"()\" e.g.\n\n          let myFunction = () => ({})\n\n          if you dont wrap the curly braces in parentheses. then you create a regular code block e.g.\n\n          let myFunction = () => { // Do stuff }\n\n           - you cant create an object literal with a regular code block \n\n           let myFunction = () => { 'title': 'title one' } - this will throw an error\n\n\n           ------ SPREAD OPERATOR ------\n\n            var obj1 = {a: 100, b: 200}\n            var obj2 = {...obj1, b 500}\n\n            NOTE:\n\n            this is the same as \n\n            var obj2 = {a: 100, b: 200, b: 500} - declared 'b' twice - then then override 'b'\n\n            OUTPUT: obj2 = {a: 100, b: 500}\n\n            You use the spread operator and insert the values from obj1\n            You then by targeting 'b' again, you then override the value  \n\n\n            so, for the above function that we're looking at - we copy over the contents of each object in the original array\n            e.g. title, body, isActive - we then override 'isActive' with the new value. We can do this by using a shorthand \"if\" statement e.g.\n\n             isActive: ( id === i ) ? !this.state.tiles[id].isActive : false\n\n             this is checking if the id of the element clicked matches the index value of the item in the array. If so, then set its 'isActive' property to true.\n             else, set it to false\n\n\n       **********************/\n\n    render() { \n        return ( \n            <TileContext.Provider value={{...this.state}}>\n                {this.props.children}\n            </TileContext.Provider>\n         );\n    }\n}\n \n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst TileDropDown = ({image, title, body, cta, index, id}) => {\n \n    return ( \n        <div className=\"tile__dropdown\">\n            <div className=\"tile_dropdown-child tile_dropdown-child--image\">\n                 <img src={image.src} alt={image.alt}/>\n            </div>\n            <div className=\"tile_dropdown-child tile_dropdown-child--text\">\n                <h3>{title}</h3>\n                <p>{body}</p>\n                {(cta) && (<Link to={'/' + id} className=\"tile_dropdown-child--cta\">{cta.text}</Link>)}\n            </div>\n        </div>\n     );\n}\n\nTileDropDown.propTypes = {\n    image: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    cta: PropTypes.object\n  }\n \nexport default TileDropDown;","import React, {useContext} from 'react';\nimport {TileContext} from '../../contexts/tileContext';\nimport PropTypes from 'prop-types';\n\n\n\nconst TileThumbnail = ({image, title, index}) => {\n\n    const {handleDropDownKeyPress, handleDropDown} = useContext(TileContext);\n    return ( \n        <div className=\"tile\" style={{backgroundImage: `url(${image.src})`}} tabIndex=\"0\" onKeyPress={(e) => {handleDropDownKeyPress(index, e)}} onClick={()=>{handleDropDown(index)}}>\n            <div className=\"tile__hover-overlay\">\n                <h3>{title}</h3>\n            </div> \n            <div className=\"tile__arrow-down\"></div>  \n         </div>\n     );\n}\n\nTileThumbnail.propTypes = {\n    image: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired\n  }\n \nexport default TileThumbnail;","import React from 'react';\nimport TileDropDown from './TileDropDown';\nimport TileThumbnail from './TileThumbnail';\nimport PropTypes from 'prop-types';\n\n\nconst Tile = ({item, index}) => {\n    return ( \n\n        <div className={\"tile-section \" + (item.isActive ? \"tile-section--active-tile\" : \"\")} aria-label={(item.isActive) ? (`${item.title} is open`) : (`${item.title} is closed`) } aria-live=\"assertive\">\n                <TileThumbnail title={item.title} image={item.image} index={index}/>\n                <TileDropDown title={item.title} body={item.body} image={item.image} cta={item.cta} index={index} id={item.id} /> \n        </div>\n\n\n     );\n}\n\nTile.propTypes = {\n    item: PropTypes.object.isRequired,\n    index: PropTypes.number.isRequired\n  }\n \nexport default Tile;","import React, { Fragment, useContext } from 'react';\nimport {TileContext} from '../../contexts/tileContext';\nimport Tile from './Tile';\n\n\n\nconst TileSection = () => {\n\n     const {tiles} = useContext(TileContext);\n    \n        let tile = tiles.map((item, index) => (\n            <Tile item={item} index={index} key={index}/>\n        ));\n\n        return (\n            <Fragment>\n                {tile}\n            </Fragment> \n         );\n    \n}\n\n\n \nexport default TileSection;","import React, {useContext, useState} from 'react';\nimport { TileContext } from '../../contexts/tileContext';\n\nconst TileLoadMore = () => {\n\n    const {loadTiles, tileShowCount} = useContext(TileContext);\n    let [updatedTilesCount, setTilesCount] = useState(tileShowCount);\n    return (\n        <div className=\"tile-load-more-container\">\n\n        <button className=\"tile-load-more\"  \n            onClick={() => {\n                setTilesCount(() => (updatedTilesCount += 8));\n                loadTiles(updatedTilesCount);\n            }}>\n            LOAD MORE\n            </button>\n\n        </div>\n\n     \n\n     );\n}\n \nexport default TileLoadMore;","import React, {useContext} from 'react';\nimport {TileContext} from '../../contexts/tileContext'; \n\nconst NavBar = () => {\n    const {tiles} = useContext(TileContext);\n    return ( \n        <div>\n            <h1>Total number of tiles: {tiles.length}</h1>\n        </div>\n     );\n}\n \nexport default NavBar;\n","import React, { Fragment, useContext} from 'react';\nimport TileSection from \"./TileSection\";\nimport { TileContext } from '../../contexts/tileContext';\nimport TileLoadMore from './TileShowMoreBtn';\nimport NavBar from '../NavBarComponent/NavBar';\n\nconst TileComponent = () => {\n\n    const {loading} = useContext(TileContext);\n\n    return (\n        <div className=\"component-container\">\n             <NavBar/>\n        <div className=\"container tile-container\">\n            {(loading) ? <h3 className=\"tile-container__loading\">Loading...</h3> : <Fragment> <TileSection/> <TileLoadMore/> </Fragment>}\n        </div>\n\n        </div>\n     );\n}\n \nexport default TileComponent;","import React, {useContext, useEffect, useState} from 'react';\nimport {TileContext} from '../../contexts/tileContext';\nimport {Link} from 'react-router-dom';\n\n\nconst TilePost = (props) => {\n\n    let urlParam = props.match.params.post_id;\n    const {fetchData} = useContext(TileContext);\n    let [post, setpost] = useState([]);\n    let [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetchData('/data/tileInfo.json')\n            .then((res) => {\n                let data = res.filter((item) => (\n                    item.id === parseInt(urlParam)\n                ))\n                setpost(data);\n                setLoading(false);\n            }).catch((err) => {\n                setLoading(false);\n                console.log(err);\n            })\n    }, [fetchData, urlParam])\n\n\n    let standAlonePost = (post.length > 0) ? post.map((item) => (\n        <div className=\"post\">\n            {(item.title) ? (<h3>{item.title}</h3>) : (<h3>This post doesn't have a title</h3>)}\n            {(item.body) ? (<p>{item.body}</p>) : (<p>This post doesn't have text content</p>)}\n            {(item.image) && (<img src={item.image.src} alt={item.image.alt}/>)} \n            {(item.cta) && (\n                    <div className=\"single-post__cta-container\">\n                        <a href={item.cta.link} className=\"single-post__cta\">Book now</a>\n                    </div>\n                )}\n        </div>\n    )) : (\n        <div className=\"err no-post\">\n            <p>{`Looks like there is no post... \"${urlParam}\"`}</p>\n            <div className=\"single-post__cta-container\">\n                 <Link to=\"/\" className=\"single-post__cta\">Go back to homepage</Link>\n            </div>\n        </div>\n        \n    )\n\n    return(\n\n        <div className=\"single-post\">\n            <h1>single post</h1>\n            {(loading) ? (<p>...loading</p>) : ( standAlonePost )}\n        </div>\n\n    )\n}\n\nexport default TilePost;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {TileProvider} from './contexts/tileContext';\n\nimport './App.css';\nimport TileComponent from './components/TileComponent/TileComponent';\nimport TilePost from './components/TileComponent/TilePost';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <TileProvider>\n          <Switch>\n\n            <Route exact path=\"/\" component={TileComponent}/>\n            <Route path=\"/:post_id\" component={TilePost}/>\n\n          </Switch>\n        </TileProvider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}